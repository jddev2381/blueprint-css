@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
    "0": 0,
    "1": 10px,
    "2": 20px,
    "3": 30px,
    "4": 40px,
    "5": 40px,
);

// base layout classes 
.container {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    box-sizing: border-box;
}
.row {
    display: flex;
    flex-flow: row wrap;
}
// vertical align items in row
// @each $key, $val in $valigns {
//     .v-align-#{$key} {
//         align-items: $val;
//         // The column (direct child of the row that .v-align-strech is on)
//         // is stretched automatically. To have the child of that child "stretch"
//         // as most novices expect to happen, we include this little hack. It is
//         // IMPORTANT TO NOTE that there can only be one element in the column for
//         // this to work, but that should really be the only time someone would 
//         // need to try to use this trick.
//         @if($key == "stretch") {
//             > * > *:nth-child(1) {
//                 height: 100%;
//             }
//         }
//     }
// }

// grid gaps
@each $key, $val in $grid-gaps {
    .gap-#{$key} > * {
        padding: $val;
    }
    .gap-#{$key} {
        margin-left: -$val;
        margin-right: - $val;
    }
}
// justify content classes 
// @each $key, $val in $justifications {
//     .justify-#{$key} {
//         justify-content: $val;
//     }
// }

@mixin colStyle($width: 0px) {
    box-sizing:border-box;
    flex-grow:0;
    width: $width;
}
// column classes
@include xs {
    @for $i from 1 through $grid-columns {
        .col-#{$i}-xs {
            @include colStyle(math.div($i * 100%, $grid-columns));
        }
    }
}
@include sm {
    @for $i from 1 through $grid-columns {
        .col-sm-#{$i} {
            @include colStyle(math.div($i * 100%, $grid-columns));
        }
    }
}
@include md {
    @for $i from 1 through $grid-columns {
        .col-md-#{$i} {
            @include colStyle(math.div($i * 100%, $grid-columns));
        }
    }
}
@include lg {
    @for $i from 1 through $grid-columns {
        .col-lg-#{$i} {
            @include colStyle(math.div($i * 100%, $grid-columns));
        }
    }
}
@include xl {
    @for $i from 1 through $grid-columns {
        .col-xl-#{$i} {
            @include colStyle(math.div($i * 100%, $grid-columns));
        }
    }
}
